|Integer scalar variables|
# x;
# x, y;

|One-dimensional arrays of integers|
|for array of size 10|
#10# x;
|to access element with index of 1|
x#1#;

|Assignment statements|
x = 10;

|Arithmetic operators (e.g., “+”, “-”, “*”, “/”)|
4 add 5; |+|
3 sub 5; |-|
2 pro 6; |*|
2 div 7; |/|
1 mod 6; |%|

x = (4 add 7) sub 8;

|Relational operators (e.g., “<”, “==”, “>”, “!=”)|
1 lt 2; |<|
5 eq 5; |==|
6 gt 7; |>|
2 ne 3; |!=|
3 leq 3; |<=|
5 geq 6; |>=|

2 and 3; |&&|
5 or 4; | || |

(6 lt 7) and (8 gt 9);

|While or Do-While loops|
when [x]:
|do whatever|;
;

|Break statement|
stop;

|If-then-else statements|
?[(x add y) eq 4]:
do whatever;
>[(x add y) eq 3]:
do whatever2;
>[1]:
;

|Read and write statements|
ain(x);
aout(x);

|Comments|
|comment|

|Functions (that can take multiple scalar arguments and return a single scalar result)|
# myfunction(parameters):
function body;
return(x);
;
|returning an integer|

# myfunction2(parameters):
function body;
return();
;
|returning nothing|